import tkinter as tk
from tkinter import ttk
from supabase import create_client, Client
from datetime import datetime
import pytz

# Configurações do Supabase
url: str = "https://mcyqyosrflmvzpfnwxnj.supabase.co"
anon_key: str = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jeXF5b3NyZmxtdnpwZm53eG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjcxMzA3NzUsImV4cCI6MjA0MjcwNjc3NX0.H1_Jj0ITk7KD02xuND8brh1PRKtXeXnxihYmWkyFsKc"


def format_date(data_hora):
    """Formata a data e hora para o horário de Brasília."""
    try:
        # Converter a string em um objeto datetime
        dt = datetime.fromisoformat(data_hora)
        # Definir o fuso horário de Brasília
        brasilia_tz = pytz.timezone('America/Sao_Paulo')
        # Converter para horário de Brasília
        dt_brasilia = dt.astimezone(brasilia_tz)
        # Retornar a data formatada
        return dt_brasilia.strftime("%d/%m/%Y %H:%M:%S")
    except ValueError:
        return "Data Inválida"


def get_data_from_supabase():
    """Função para buscar os dados do Supabase."""
    supabase: Client = create_client(url, anon_key)
    response = supabase.table('leituras_gas').select('*').execute()

    if response.data:
        # Imprimir os dados para verificar a estrutura
        print("Dados retornados:", response.data)
        return response.data
    elif response.error:
        print("Erro ao buscar dados:", response.error.message)
        return []
    else:
        return []


def update_table(tree):
    """Atualiza os dados da tabela na interface."""
    # Limpar dados antigos da tabela
    for row in tree.get_children():
        tree.delete(row)

    # Buscar dados do Supabase
    data = get_data_from_supabase()

    # Inserir cada entrada na tabela
    for entry in data:
        # Usar os campos corretos do banco de dados: 'data_hora', 'valor_leitura', 'alarme'
        data_value = format_date(entry.get('data_hora', 'Sem Data'))
        valor_leitura = entry.get('valor_leitura', 'N/A')
        alarme = entry.get('alarme', 'N/A')

        tree.insert('', 'end', values=(data_value, valor_leitura, alarme))


# Função para criar a interface gráfica
def main_interface():
    root = tk.Tk()
    root.title("Monitoramento de Gás")

    # Configuração da janela
    root.geometry("600x400")

    # Título
    title_label = tk.Label(root, text="Leituras de Gás", font=("Arial", 18))
    title_label.pack(pady=10)

    # Criar a tabela
    columns = ('Data e Hora', 'Valor da Leitura', 'Alarme')
    tree = ttk.Treeview(root, columns=columns, show='headings')

    # Definir os cabeçalhos
    tree.heading('Data e Hora', text='Data e Hora')
    tree.heading('Valor da Leitura', text='Valor da Leitura')
    tree.heading('Alarme', text='Alarme')

    # Definir o tamanho das colunas
    tree.column('Data e Hora', width=200)
    tree.column('Valor da Leitura', width=150)
    tree.column('Alarme', width=100)

    tree.pack(pady=20)

    # Botão para atualizar os dados
    update_button = tk.Button(root, text="Atualizar Dados", command=lambda: update_table(tree))
    update_button.pack(pady=10)

    # Carregar os dados iniciais
    update_table(tree)

    # Iniciar a interface gráfica
    root.mainloop()


# Executa a interface
main_interface()
